{"version":3,"sources":["../../../src/web.ts"],"names":["get"],"mappings":"sxBAOa,EAAb,YAAE,qBAAF,iBAYI,SAAF,IAAI,2BAAJ,aAZA,uBAAE,IAAJ,gBAAIA,IAIF,WACQ,MAAkB,qBAAb,UACF,SAAS,kBAAkB,2BAA2B,OAAS,IAN5E,CAAI,IAAJ,aAAI,MAgBF,WACE,IAAM,EAAW,OAGjB,KAFyB,OAAR,eAAQ,IAAR,cAAQ,EAAR,SAAU,eAAe,IAE1C,CAIA,IAAI,EAAO,SAAS,qBAAqB,QAAQ,GAC7C,EAAS,SAAS,cAAc,UAEpC,EAAO,KAAO,kBACR,EAAC,OAAQ,EACT,EAAC,OAAQ,EACT,EAAC,GAAK,EACZ,EAAO,OAAS,KAAK,iBACrB,EAAO,IAAM,yCACb,EAAK,YAAY,MAjCrB,CAAI,IAAJ,OAAI,MAoCF,WAAU,IAAN,OACG,KAAK,gBAGJ,KAAD,WAAa,IAAI,SAAQ,YAE3B,OAAe,YAAc,EAC9B,EAAK,gBAGP,KAAK,2BA9CT,CAAI,IAAJ,mBAAI,MAiDF,WACQ,KAAD,KAAK,SAAS,WACT,IAAF,EAAwC,CAClC,UAAE,SAAS,kBAAkB,2BAA2B,GAAW,SAG9C,MAA7B,EAAO,QAAQ,YAA0D,MAApC,EAAO,QAAQ,WAAW,SACjE,EAAa,MAAQ,EAAO,QAAQ,WAAW,OAAO,KAAK,MAGrD,KAAH,MAAM,KAAK,GACP,OAAO,mBA5DtB,CAAI,IAAJ,SAAI,MAAJ,uCAgEE,aAAQ,IAAR,OAAQ,OAAR,sBAAU,OAAE,OAAZ,eAAc,KAAd,2BACS,IAAI,QAAJ,uCAAY,WAAO,EAAS,GAAhB,wFAGX,GAAqB,EAEzB,IACE,EAAiE,MAA5C,EAAO,QAAQ,WAAW,eAC/C,UAPa,IAWX,EAXW,iCAYuB,KAAK,MAAM,kBAAkB,qBAZpD,OAYP,EAZO,OAab,EAAiB,EAAsB,KAb1B,yCAeP,KAAK,MAAM,kBAAkB,SAftB,WAkBT,EAAa,KAAK,MAAM,kBAAkB,YAAY,OAExD,EApBW,kCAsBP,EAAW,qBAtBJ,SAyBT,EAAO,EAAK,YAAY,IACzB,eAAiB,EACtB,EAAQ,GA3BO,kDA6Bf,EAAM,MA7BS,0DAAZ,0DADK,KAAd,EAAc,IAAd,gCAhEF,uDAAI,IAAJ,UAAI,MAAJ,uCAmGE,oGAC6B,KAAK,MAAM,kBAAkB,YAAY,MAAM,qBAD5E,cACQ,EADR,yBAES,CACL,YAAa,EAAa,aAC1B,QAAS,EAAa,WAJ1B,2CAnGF,uDAAI,IAAJ,UAAI,MAAJ,uCA2GE,uGACS,KAAK,MAAM,kBAAkB,WADtC,2CA3GF,uDAAI,IAAJ,wBAAI,MAAJ,uCA+GU,yGACA,KAAK,WADL,OAEN,KAAK,MAAM,kBAAkB,YAAY,QAAO,YAC9C,EAAK,gBAAgB,aAAc,EAAW,aAAe,EAAK,YAAY,GAAc,SAHxF,gDA/GV,uDAAI,IAAJ,cAAI,MAsHM,SAAY,GAClB,IAAM,EAAO,GACP,EAAU,EAAW,kBAE3B,EAAK,MAAQ,EAAQ,WACrB,EAAK,WAAa,EAAQ,gBAC1B,EAAK,UAAY,EAAQ,eACzB,EAAK,GAAK,EAAQ,QAClB,EAAK,SAAW,EAAQ,cACxB,EAAK,KAAO,EAAQ,UAEpB,IAAM,EAAe,EAAW,iBAAgB,GAMhD,OALA,EAAK,eAAiB,CACpB,YAAa,EAAa,aAC1B,QAAS,EAAa,UAGjB,MAvIX,GAAmC","file":"static/js/132.bb92c25b.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n// @ts-ignore\nimport config from '../../../../../capacitor.config.json';\nexport class GoogleAuthWeb extends WebPlugin {\n    constructor() {\n        super();\n    }\n    get webConfigured() {\n        if (typeof document !== 'undefined') {\n            return document.getElementsByName('google-signin-client_id').length > 0;\n        }\n        else {\n            return false;\n        }\n    }\n    loadScript() {\n        const scriptId = 'gapi';\n        const scriptEl = document === null || document === void 0 ? void 0 : document.getElementById(scriptId);\n        if (scriptEl) {\n            return;\n        }\n        var head = document.getElementsByTagName('head')[0];\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.id = scriptId;\n        script.onload = this.platformJsLoaded;\n        script.src = 'https://apis.google.com/js/platform.js';\n        head.appendChild(script);\n    }\n    init() {\n        if (!this.webConfigured)\n            return;\n        this.gapiLoaded = new Promise(resolve => {\n            // HACK: Relying on window object, can't get property in gapi.load callback\n            window.gapiResolve = resolve;\n            this.loadScript();\n        });\n        this.addUserChangeListener();\n    }\n    platformJsLoaded() {\n        gapi.load('auth2', () => {\n            const clientConfig = {\n                client_id: document.getElementsByName('google-signin-client_id')[0].content\n            };\n            if (config.plugins.GoogleAuth != null && config.plugins.GoogleAuth.scopes != null) {\n                clientConfig.scope = config.plugins.GoogleAuth.scopes.join(' ');\n            }\n            gapi.auth2.init(clientConfig);\n            window.gapiResolve();\n        });\n    }\n    async signIn() {\n        return new Promise(async (resolve, reject) => {\n            try {\n                var serverAuthCode;\n                var needsOfflineAccess = false;\n                try {\n                    needsOfflineAccess = config.plugins.GoogleAuth.serverClientId != null;\n                }\n                catch (_a) {\n                }\n                if (needsOfflineAccess) {\n                    const offlineAccessResponse = await gapi.auth2.getAuthInstance().grantOfflineAccess();\n                    serverAuthCode = offlineAccessResponse.code;\n                }\n                else {\n                    await gapi.auth2.getAuthInstance().signIn();\n                }\n                const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n                if (needsOfflineAccess) {\n                    // HACK: AuthResponse is null if we don't do this when using grantOfflineAccess\n                    await googleUser.reloadAuthResponse();\n                }\n                const user = this.getUserFrom(googleUser);\n                user.serverAuthCode = serverAuthCode;\n                resolve(user);\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    async refresh() {\n        const authResponse = await gapi.auth2.getAuthInstance().currentUser.get().reloadAuthResponse();\n        return {\n            accessToken: authResponse.access_token,\n            idToken: authResponse.id_token\n        };\n    }\n    async signOut() {\n        return gapi.auth2.getAuthInstance().signOut();\n    }\n    async addUserChangeListener() {\n        await this.gapiLoaded;\n        gapi.auth2.getAuthInstance().currentUser.listen(googleUser => {\n            this.notifyListeners(\"userChange\", googleUser.isSignedIn() ? this.getUserFrom(googleUser) : null);\n        });\n    }\n    getUserFrom(googleUser) {\n        const user = {};\n        const profile = googleUser.getBasicProfile();\n        user.email = profile.getEmail();\n        user.familyName = profile.getFamilyName();\n        user.givenName = profile.getGivenName();\n        user.id = profile.getId();\n        user.imageUrl = profile.getImageUrl();\n        user.name = profile.getName();\n        const authResponse = googleUser.getAuthResponse(true);\n        user.authentication = {\n            accessToken: authResponse.access_token,\n            idToken: authResponse.id_token\n        };\n        return user;\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}